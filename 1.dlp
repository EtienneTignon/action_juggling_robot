at(R,V,T) :- at(R,V,T-1), not move(R,_,_,T-1), time(T).
:- at(_,_,T), not time(T).

{move(R,V1,V2,T) : edge(V1,V2,_)}1 :- time(T), robot(R).
:- move(R,V1,_,T), not at(R,V1,T).
at(R,V2,T) :- move(R,V1,V2,T-1), edge(V1,V2,_).

% Just to break symetry
:- move(R,_,V,T), not goal(R,V), not move(R,V,_,T+1).
:- robot(R), not move(R,_,_,0).

&diff {move(R,V,V',T) - 0} <= (horizon-1) :- move(R,V,V',T).
&diff {move(R,V1,V2,T) - move(R,V1',V2',T')} <= -1 :- move(R,V1,V2,T), move(R,V1',V2',T'), T<T'.

1{before(move(R,V1,V2,T),move(R',V1',V2,T')) ; before(move(R',V1',V2,T'),move(R,V1,V2,T))}1 :- move(R,V1,V2,T), move(R',V1',V2,T'), R!=R'.
&diff {move(R,V1,V2,T) - move(R',V1',V2,T')} <= -1 :- before(move(R,V1,V2,T),move(R',V1',V2,T')).

:- at(R1,V,T), at(R2,V,T), R1!=R2.
% :- at(R1,V1,T), at(R2,V2,T), move(R2,V1,T), move(R1,V2,T), R1!=R2, V1!=V2.

:- goal(R,V), not at(R,V,horizon).

#show.
% #show move/4.
% #show at/3.
